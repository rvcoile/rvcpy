#__author__ = "RVC"
#__email__= "ruben.vancoile@gmail.com"
#__date__= "2015-07-22"


import numpy as np
import pandas as pd
from copy import deepcopy

# Gauss Hermite: http://www.efunda.com/math/num_integration/findgausshermite.cfm
# Note: only n==5 has been tested in some detail

def GaussWeighting(X):
	W=deepcopy(X)

	max_n_Gauss=len(list(W.index))

	for variables in list(X.columns):
		local=W[variables]; local=local.dropna()
		n_Gauss=len(local.values)
		weights=GaussWeights(n_Gauss)
		if n_Gauss<max_n_Gauss:
			# i.e. if not for each variable the same number of Gauss points has been considered... elaborate later
			# not tested!!! !!!!
			weights=weights+[np.nan]*(max_n_Gauss-n_Gauss)
		W[variables]=weights
	return W

def GaussWeights(n):
	####################################################################
	### This is Gauss Hermite - recode later for other options...!!! ###
	####################################################################

	# Traditional [Physicist] Gauss-Hermite weights
	if n==2:
		weights=[0.886226925453,0.886226925453]
	if n==3:
		weights=[0.295408975151,1.1816359006,0.295408975151]
	if n==4:
		weights=[0.0813128354472,0.804914090006,0.804914090006,0.0813128354472]
	if n==5:
		weights=[0.019953242059,0.393619323152,0.945308720483,0.393619323152,0.019953242059]	
	if n==6:
		weights=[0.00453000990551,0.157067320323,0.724629595224,0.724629595224,0.157067320323,0.00453000990551]
	if n==7:
		weights=[0.0009717812451,0.0545155828191,0.42560725261,0.810264617557,0.42560725261,0.0545155828191,0.0009717812451]
	if n==8:
		weights=[0.000199604072211,0.0170779830074,0.207802325815,0.661147012558,0.661147012558,0.207802325815,0.0170779830074,0.000199604072211]
	if n==9:
		weights=[3.96069772633**-5,0.00494362427554,0.0884745273944,0.432651559003,0.720235215606,0.432651559003,0.0884745273944,0.00494362427554,3.96069772633**-5]
	if n==10:
		weights=[7.64043285523**-6,0.00134364574678,0.0338743944555,0.240138611082,0.610862633735,0.610862633735,0.240138611082,0.0338743944555,0.00134364574678,7.64043285523**-6]
	if n==11:
		weights=[1.43956039371**-6,0.000346819466323,0.0119113954449,0.117227875168,0.429359752356,0.654759286915,0.429359752356,0.117227875168,0.0119113954449,0.000346819466323,1.43956039371**-6]
	if n==12:
		weights=[2.65855168436**-7,8.57368704359**-5,0.00390539058463,0.0516079856159,0.260492310264,0.570135236262,0.570135236262,0.260492310264,0.0516079856159,0.00390539058463,8.57368704359**-5,2.65855168436**-7]


	if n==17:
		weights=[4.5805789308**-11,4.97707898164**-8,7.11228914001**-6,0.000298643286698,0.00506734995763,0.0409200341498,0.17264829767,0.40182646947,0.530917937625,0.40182646947,0.17264829767,0.0409200341498,0.00506734995763,0.000298643286698,7.11228914002**-6,4.97707898163**-8,4.5805789308**-11]
	# multiplication sqrt(2) for "Probabilistic" Gauss-Hermite weights	
	return [w / np.sqrt(np.pi) for w in weights] 

def GaussPoints(n):
	####################################################################
	### This is Gauss Hermite - recode later for other options...!!! ###
	####################################################################
	# Traditional [Physicist] Gauss-Hermite points
	if n==2:
		points=[-0.707106781187,0.707106781187]
	if n==3:
		points=[-1.22474487139,0.,1.22474487139]
	if n==4:
		points=[-1.65068012389,-0.524647623275,0.524647623275,1.65068012389]
	if n==5:
		points=[-2.02018287046,-0.958572464614,0.,0.958572464614,2.02018287046]
	if n==6:
		points=[-2.35060497367,-1.33584907401,-0.436077411928,0.436077411928,1.33584907401,2.35060497367]
	if n==7:
		points=[-2.65196135684,-1.67355162877,-0.816287882859,0.,0.816287882859,1.67355162877,2.65196135684]
	if n==8:
		points=[-2.93063742026,-1.9816567567,-1.15719371245,-0.381186990207,0.381186990207,1.15719371245,1.9816567567,2.93063742026]
	if n==9:
		points=[-3.19099320178,-2.26658058453,-1.46855328922,-0.723551018753,0.,0.723551018753,1.46855328922,2.26658058453,3.19099320178]
	if n==10:
		points=[-3.43615911884,-2.53273167423,-1.7566836493,-1.03661082979,-0.342901327224,0.342901327224,1.03661082979,1.7566836493,2.53273167423,3.43615911884]
	if n==11:
		points=[-3.66847084656,-2.78329009978,-2.02594801583,-1.32655708449,-0.656809566882,0.,0.656809566882,1.32655708449,2.02594801583,2.78329009978,3.66847084656]
	if n==12:
		points=[-3.88972489787,-3.02063702512,-2.2795070805,-1.59768263515,-0.94778839124,-0.314240376254,0.314240376254,0.94778839124,1.59768263515,2.2795070805,3.02063702512,3.88972489787]

	if n==17:
		points=[-4.87134519367,-4.06194667588,-3.37893209114,-2.7577629157,-2.17350282667,-1.61292431422,-1.06764872574,-0.531633001343,0.,0.531633001343,1.06764872574,1.61292431422,2.17350282667,2.7577629157,3.37893209114,4.06194667588,4.87134519367]
	# multiplication sqrt(2) for "Probabilistic" Gauss-Hermite weights	
	points= [z * np.sqrt(2) for z in points] 
	PointsList=pd.DataFrame(points,index=np.arange(1,n+1,1),columns=['zj'])
	return PointsList